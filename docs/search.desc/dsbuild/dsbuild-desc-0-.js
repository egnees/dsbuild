searchState.loadedDescShard("dsbuild", 0, "DSbuild is a high-level framework aimed to provide …\nProcess address, which is used to route network messages.\nResource can not be created, because it already exists.\nPassed buffer size exceeds size limit.\nHandle which allows process to interact with external …\nContains the error value\nContains the error value\nAbstraction over the file.\nRepresents error types which can appear when process …\nRepresents result of the file system operation.\nWrapper around user-defined process, which allows to send …\nRepresents message, which is used by [processes][…\nResource not found.\nMessage was not sent.\nContains the success value\nContains the success value\nRepresents requirements for every user-defined process.\nRepresents read access guard for user-defined process.\nRepresents wrapper around user-defined process which …\nRepresents node in real mode.\nRepresents error type of send operation.\nRepresents result of send operation.\nRepresensts simulation of real world system environment: …\nRepresents message tag.\nMessage was not acknowledged in the given time.\nStorage is unavailable. Requested operation can be …\nAdd node to simulation.\nAdd node with specified storage capacity to simulation.\nAllows to add process with specified name.\nAdd process.\nAppend passed data to the file.\nCancel timer with specified name.\nConnect node to the network\nCrashes the specified node and its storage.\nAllows to create file.\nAllows to delete file.\nDisconnect node from the network\nAllows to check if file exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns deserialized message’s data of template type, …\nGet message’s raw data.\nGet message’s tip.\nSpecifies listen host of the owner node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the node is crashed.\nPerform specified number of steps through the simulation.\nCreate a new message with specified tip and data, which …\nAllows to create new node with specified listen host, port …\nCreate new simulation with provided seed.\nCreates new address instance.\nCreate a new message with specified tip and raw data.\nCreates new address instance from string slice.\nCalled when process receives local message from user.\nCalled when process receives network message from other …\nCalled when previously set timer is fired.\nAllows to open file with specified name.\nSpecifies listen port of the owner node.\nSpecifies process name within the owner node.\nGet names of all processes in the system.\nReturns read access guard to user-defined process.\nRead into the specified buffer from the specified offset.\nReturns guard for read access to user-defined process. See …\nExtracts and returns local messages, produced by the …\nReturns the number of messages received by the process.\nAllows to receive local messages from process.\nRecovers the previously crashed node.\nReruns previously shut node.\nRun spawned asynchronous activities and processes.\nAllows to unreliable send network message to the specified …\nAllows process to send message to user.\nSend local message to the process.\nAllows to reliable send network message with specified tag …\nAllows to reliable send network message to the specified …\nAllows to reliable send network message with specified tag.\nAllows to send local messages to process.\nReturns the number of messages sent by the process.\nSet the fixed network delay.\nSet the minimum and maximum network delays.\nSet drop rate of the network.\nSet timer with specified name and delay.\nSet timer with specified name and delay once.\nShutdowns the specified node with saving storage.\nAllows to spawn asynchronous activity on the node.\nSpawn asynchronous activity.\nAllows to disable pairwise connections between groups.\nPerform single step through the simulation.\nSteps through the simulation until there are no local …\nSteps through the simulation until there are no pending …\nAllows to stop the process.\nAllows to stop process.\nAllows to get current time on node in seconds.")