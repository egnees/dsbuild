searchState.loadedDescShard("dsbuild", 0, "DSbuild is a high-level framework aimed to provide …\nProcess address, which is used to route network messages.\nResource can not be created, because it already exists.\nPassed buffer size exceeds size limit.\nHandle which allows process to interact with external …\nContains the error value\nContains the error value\nAbstraction over the file.\nRepresents error types which can appear when process …\nRepresents result of the file system operation.\nWrapper around user-defined process, which allows to send …\nRepresents message, which is used by processes to …\nResource not found.\nMessage was not sent.\nContains the success value\nContains the success value\nRepresents requirements for every user-defined process.\nRepresents read access guard for user-defined process.\nRepresents wrapper around user-defined process which …\nRepresents node in real mode.\nRepresents error type of send operation.\nRepresents result of send operation.\nRepresensts simulation of real world system environment: …\nRepresents message tag.\nMessage was not acknowledged in the given time.\nStorage is unavailable. Requested operation can be …\nDefinition of structures and functions, which are used by …\nSpecifies listen host of the owner node.\nCalled when process receives local message from user.\nCalled when process receives network message from other …\nCalled when previously set timer is fired.\nSpecifies listen port of the owner node.\nSpecifies process name within the owner node.\nAllows to receive local messages from process.\nAllows to send local messages to process.\nDefinition of structures and functions, which are used in …\nHandle which can be used by process to interact with outer …\nManipulations with files.\nDefinition of <code>Message</code> which could be passed through …\nDefinition of network-related structures.\nDefinition of trait <code>Process</code> and struct <code>ProcessWrapper</code>.\nHandle which allows process to interact with external …\nCancel timer with specified name.\nAllows to create file.\nAllows to check if file exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllows to open file with specified name.\nAllows to unreliable send network message to the specified …\nAllows process to send message to user.\nAllows to reliable send network message with specified tag …\nAllows to reliable send network message to the specified …\nAllows to reliable send network message with specified tag.\nSet timer with specified name and delay.\nSet timer with specified name and delay once.\nSpawn asynchronous activity.\nAllows to stop the process.\nAllows to get current time on node in seconds.\nResource can not be created, because it already exists.\nPassed buffer size exceeds size limit.\nContains the error value\nAbstraction over the file.\nRepresents error types which can appear when process …\nRepresents result of the file system operation.\nResource not found.\nContains the success value\nStorage is unavailable. Requested operation can be …\nAppend passed data to the file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead into the specified buffer from the specified offset.\nRepresents message, which is used by processes to …\nRepresents message tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns deserialized message’s data of template type, …\nGet message’s raw data.\nGet message’s tip.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new message with specified tip and data, which …\nCreate a new message with specified tip and raw data.\nContains the error value\nMessage was not sent.\nContains the success value\nRepresents error type of send operation.\nRepresents result of send operation.\nMessage was not acknowledged in the given time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcess address, which is used to route network messages.\nRepresents requirements for every user-defined process.\nRepresents read access guard for user-defined process.\nRepresents possible states of the user processes inside of …\nRepresents wrapper around user-defined process which …\nCorresponds running process.\nCorresponds to stopped process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSpecifies listen host of the owner node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new address instance.\nCreates new node address instance with empty process name.\nCreates new address instance from string slice.\nCalled when process receives local message from user.\nCalled when process receives network message from other …\nCalled when previously set timer is fired.\nSpecifies listen port of the owner node.\nSpecifies process name within the owner node.\nReturns guard for read access to user-defined process. See …\nDefinition of context-related objects.\nDefinition of asynchronous messenger <code>GRpcMessenger</code> …\nDefinition of message waiters.\nDefinition of asynchronous network manager.\nDefinition of node in real mode.\nDefinition of process management objects.\nDefinition of time management objects.\nRepresents context of system in the real mode.\nCancel timer with specified name.\nCreate file with specified name.\nCheck if file exists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen file with specified name.\nSend network message.\nSend local message.\nSee <code>crate::common::context::Context::send_recv_with_tag</code>.\nSend network message reliable. It is guaranteed that …\nSee <code>crate::common::context::Context::send_with_tag</code>.\nSet timer with specified name and delay. If such timer …\nSet timer with specified name and delay. If such timer …\nSpawn asynchronous activity.\nStop the process.\nReturns current time in seconds since the Unix epoch.\nWrapper around user-defined process, which allows to send …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns read access guard to user-defined process.\nAllows to receive local messages from process.\nAllows to send local messages to process.\nAllows to stop process.\nUsed to pass responses on requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPassed message.\nAddress of process, which will receive request.\nAddress of process, which sends request.\nResponse message from receiver, which indicates whether …\nOptional message tag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated client implementations.\nGenerated server implementations.\nReturns the value of <code>tag</code>, or the default value if <code>tag</code> is …\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents node in real mode.\nAllows to add process with specified name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllows to create new node with specified listen host, port …\nRun spawned asynchronous activities and processes.\nAllows to spawn asynchronous activity on the node.\nAll messages which can be received from system.\nResponsible for process interaction with system, storage, …\nProxy between system and process implementation. Calls …\nAll messages which can be sent to system.\nAddress of the process. Used to communicate in network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaiters.\nCreate new process manager.\nTo communicate with outside. Must be passed to real …\nProcess implementation, provided by user.\nRun cycle of the process manager.\nResponsible for settings and cancelling timers. Not …\nCancel all pending timers.\nCancel timer with specified name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSet timer with specified name, delay and overwrite …\nDefinition of virtual mode context.\nDefinition of manager of nodes in virtual system.\nDefinition of <code>process wrapper</code> which is used in the virtual …\nSimulation.\nRepresents context in virtual mode. Responsible for …\nCancel timer with specified name.\nCreate file with specified name.\nCheck if file exists.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpen file.\nSend message to specified address.\nSend local message.\nSee <code>crate::common::context::Context::send_recv_with_tag</code>.\nSend network message reliable with specified timeout. It …\nSee <code>crate::common::context::Context::send_with_tag</code>.\nSet timer with specified name and delay. If such timer …\nSet timer with specified name and delay. If such timer …\nSpawn asynchronous activity.\nStop the process.\nGet current simulation time.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents node manager.\nAdd new node to the manager.\nAdd new process to the node.\nCheck if the <code>name</code> is valid.\nCheck if node with such <code>node_name</code> exists.\nCheck if process with such <code>process_name</code> exists on the node …\nRemoved all processes from the node.\nReturns full name of the process <code>process_name</code> located on …\nReturns the argument unchanged.\nMap process by it’s address into the view …\nMap full process name, potentially received from …\nCalls <code>U::from(self)</code>.\nRepresents virtual process wrapper, which is to be passed …\nCreate virtual context, which matches to the virtual …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new virtual process wrapper.\nRepresents future which formally satisfies <code>Send</code> …\nRepresents alias on <code>Send</code> future.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresensts simulation of real world system environment: …\nAdd node to simulation.\nAdd node with specified storage capacity to simulation.\nAdd process.\nConnect node to the network\nCrashes the specified node and its storage.\nDisconnect node from the network\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the node is crashed.\nPerform specified number of steps through the simulation.\nCreate new simulation with provided seed.\nGet names of all processes in the system.\nExtracts and returns local messages, produced by the …\nReturns the number of messages received by the process.\nRecovers the previously crashed node.\nReruns previously shut node.\nSend local message to the process.\nReturns the number of messages sent by the process.\nSet the fixed network delay.\nSet the minimum and maximum network delays.\nSet drop rate of the network.\nShutdowns the specified node with saving storage.\nAllows to disable pairwise connections between groups.\nPerform single step through the simulation.\nSteps through the simulation until there are no local …\nSteps through the simulation until there are no pending …")