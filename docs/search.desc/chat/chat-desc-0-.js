searchState.loadedDescShard("chat", 0, "Definition of chat abstraction.\nDefinitions of methods for [<code>Client</code>] input and output …\nDefinition of requests from client to server which can …\nDefinition of possible client states and related logic.\nAbstraction on chat. Prevents chat events reordering by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcess arrived chat event. Returns events in chat, which …\nAccepts not ordered sequence of chat events. Returns …\nEvent in chat.\nRepresents info which user can get from the process.\nRepresents inner error information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStart client io-activity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse request from user.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents request from client to server.\nRepresents types of the client request.\nAllows to build requests comfortable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCorresponds to state, when client listens for the user …\nCorresponds to state, when client waits for the response …\nRepresents state of client.\nRepresents information which <code>State</code> returns to the client.\nRepresents possible states of client.\nApply specified client request.\nApply specified server message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest which client can send to the server. After one …\nInformation which client can send to the user in the same …\nDefinition of events in chat.\nDefinition of messages which can be produces by server.\nDefinition of replication logic.\nRepresents chat event born by request of some client.\nRepresents event in the chat.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nRepresents response from server to client request.\nRepresents messages from server to the client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents request from the node to receive events with …\nRepresents request to replicate event.\nRepresents message with the total sequence number on the …\nRepresents request to get receiver total seq number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet total seq number on the replica with specified address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequest events with global sequence number in the range […\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")